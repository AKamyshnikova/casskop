version: 2.1


experimental:
  notify:
    branches:
      only:
        - master

# Define shareable packages of configuration
# elements used into the worflow (= Orbs)
orbs:
  minikube:
    # Setting up VM executor for minikube.
    executors:
      vm-classic:
        machine:
          image: circleci/classic:201808-01
    # Setting up job list
    jobs:
      e2e-orb: # Define job which execute 'docker-e2e-test-fix-arg' makefile job
        # PARAMETERS
        parameters:
          test_name:
            description: name of the test in e2e code
            type: string
            default: toto
          operatorDir:
            type: string
            description: relative path where the build must be run
            default: cassandra-k8s-operator
        executor: vm-classic
        working_directory: /home/circleci/<< parameters.operatorDir >>
        # ENVIRONMENTS VARIABLES
        environment:
          K8S_VERSION: v1.14.0
          KUBECONFIG: /home/circleci/.kube/config
          MINIKUBE_VERSION: v1.0.0
          MINIKUBE_WANTUPDATENOTIFICATION: false
          MINIKUBE_WANTREPORTERRORPROMPT: false
          MINIKUBE_HOME: /home/circleci
          MINIKUBE_CONFIG: /home/circleci/.minikube
          CHANGE_MINIKUBE_NONE_USER: true
          GOPATH: /go
          GO111MODULE: on
          DOCKER_LATEST: 1
          GIN_MODE: release
        # STEPS
        steps:
          # Pre-checkout steps
          - run: # Install Minikube components to be able to run it.
              name: Setup minikube
              command: |
                wget -O minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
          - run: # Run minikube with expected parameters
              name: Start minikube
              background: true
              command: |
                sudo -E minikube start --vm-driver=none --cpus 4 --memory 4096 --kubernetes-version=${K8S_VERSION}
          - run: # Install kubectl cli
              name: Setup kubectl
              command: |
                wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
                mkdir -p ${HOME}/.kube
                touch ${HOME}/.kube/config
          # Checkout steps
          - checkout:
              path: /home/circleci/cassandra-k8s-operator
          - attach_workspace:  # Create artifact from workdir
              at: /tmp/workspace
          - run:
              name: Copying artifacts
              command: mv /tmp/workspace/* ./
          # Check environment set up correctly
          - run: # Wait until minikube nodes are ready
              name: Wait for minikube
              command: |
                timeout 300s bash \<<EOT
                  set -o pipefail
                  function is_ready()
                  {
                    kubectl get nodes -o json \
                      | jq '.items[].status.conditions[] | select(.type=="Ready" and .status=="True")'
                  }
                  until is_ready
                  do
                    sleep 1
                  done
                EOT
          - run: # Check we correctly access to K8s information with kubectl cli
              name: Test k8s
              command: |
                kubectl get nodes
                kubectl get pods
          # Acceptance test
          - run: # Run acceptance test through 'docker-e2e-test-fix-arg' makefile step
              name: Operator acceptance test
              no_output_timeout: 1200
              command: |
                kubectl create namespace cassandra-e2e
                ./tools/circleci-get-logs.sh&
                make docker-e2e-test-fix-arg << parameters.test_name >> || {
                kubectl get events --all-namespaces --sort-by .metadata.creationTimestamp ;
                echo "Show Operator logs:"
                cat operator.log
                false;
                }
  operator:
    # Setting up docker executor using casskop-build image.
    executors:
      operator-build:
        docker:
          - image: orangeopensource/casskop-build:v0.9.0
    # Define jobs list
    jobs:
      # Build job, which build operator docker image (with operator-sdk build)
      generate:
        # PARAMETERS
        parameters:
          operatorDir:
            type: string
            description: relative path where the build must be run
            default: cassandra-k8s-operator
          operatorName:
            type: string
            description: operator's name
            default: CassKop
        working_directory: /home/circleci/<< parameters.operatorDir >>
        executor: operator-build
        # STEPS
        steps:
          # Checkout steps
          - checkout:
              path: /home/circleci/cassandra-k8s-operator
          - setup_remote_docker # Creates a separate environment for each build for security.
          - restore_cache: # If exist, restore dependencies libs download cache, from previous pipeline execution.
              keys: # Use checksum of go.sum to version cache.
                - << parameters.operatorName >>-generate-{{ .Branch }}-{{ checksum "go.sum" }}
          - attach_workspace:  # Create artifact from workdir
              at: /tmp/workspace
          - run:
              name: Copying artifacts
              command: mv /tmp/workspace/* ./
          # Build steps
          - run:
              name: Download dependencies
              command: if [ ! -d vendor ]; then go mod download; fi
          - run:
              name: Vendor dependencies
              command: if [ ! -d vendor ]; then go mod vendor; fi
          - run:
              name: Build Operator
              command: make generate
          # Create artifacts
          - persist_to_workspace:
              root: /tmp/workspace/<< parameters.operatorDir >>
              paths:
                - build/_output
                - pkg/apis/db/v1alpha1/zz_generated.deepcopy.go
                - vendor

      # Build job, which build operator docker image (with operator-sdk build)
      build:
        # PARAMETERS
        parameters:
          operatorDir:
            type: string
            description: relative path where the build must be run
            default: cassandra-k8s-operator
          operatorName:
            type: string
            description: operator's name
            default: CassKop
        working_directory: /home/circleci/<< parameters.operatorDir >>
        executor: operator-build
        # STEPS
        steps:
        # Checkout steps
        - checkout:
            path: /home/circleci/cassandra-k8s-operator
        - setup_remote_docker # Creates a separate environment for each build for security.
        - restore_cache: # If exist, restore dependencies libs download cache, from previous pipeline execution.
            keys: # Use checksum of go.sum to version cache.
              - << parameters.operatorName >>-build-{{ .Branch }}-{{ checksum "go.sum" }}
        - attach_workspace:  # Create artifact from workdir
            at: /tmp/workspace
        - run:
            name: Copying artifacts
            command: mv /tmp/workspace/* ./
        # Build steps
        - run:
            name: Build Operator
            command: make build
        # Create artifacts
        - persist_to_workspace:
            root: /tmp/workspace/<< parameters.operatorDir >>
            paths:
              - build/_output
              - pkg/apis/db/v1alpha1/zz_generated.deepcopy.go
              - vendor
        # Deploy steps
        - deploy:
            name: Push image to Docker Hub
            command: |
              if [[ $(echo "$CIRCLE_BRANCH" | grep -c "pull") -gt 0 ]]; then
                echo "This is a PR, we don't push to Hub."
              else
                docker login --username $DOCKERHUB_USER --password $DOCKERHUB_PASSWORD
                make push
              fi
        # Cache configuration
        - save_cache:
            name: Save build artefacts in cache
            key: << parameters.operatorName >>-build-{{ .Branch }}-{{ checksum "go.sum" }}
            paths:
              - build/_output
              - pkg/apis/db/v1alpha1/zz_generated.deepcopy.go
              - vendor

      # Unit test job, will execute makefile 'unit-test-with-vendor' step
      unit-test:
        # PARAMETERS
        parameters:
          operatorDir:
            type: string
            description: relative path where the build must be run
            default: cassandra-k8s-operator
          operatorName:
            type: string
            description: operator's name
            default: CassKop
        working_directory: /home/circleci/<< parameters.operatorDir >>
        executor: operator-build
        # STEPS
        steps:
        # Checkout steps
        - checkout:
            path: /home/circleci/cassandra-k8s-operator
        - attach_workspace:  # Create artifact from workdir
            at: /tmp/workspace
        - run:
            name: Copying artifacts
            command: mv /tmp/workspace/* ./
        # Unit tests steps
        - run:
            name: Unit Tests
            command: make unit-test-with-vendor
        # Artifacts definitions
        - store_artifacts: # Store unit test coverage reports
            path: coverage.html
        - persist_to_workspace:
            root: /tmp/workspace/<< parameters.operatorDir >>
            paths:
              - coverage.out
              - test-report.out

      # Dgoss tests job, will execute make 'dgoss-bootstrap'
      docker-dgoss-test:
        # PARAMETERS
        parameters:
          operatorDir:
            type: string
            description: relative path where the build must be run
            default: cassandra-k8s-operator
          operatorName:
            type: string
            description: operator's name
            default: CassKop
        working_directory: /home/circleci/<< parameters.operatorDir >>
        executor: operator-build
        # STEPS
        steps:
        # Checkout steps
        - checkout:
            path: /home/circleci/cassandra-k8s-operator
        - setup_remote_docker
        - attach_workspace:  # Create artifact from workdir
            at: /tmp/workspace
        - run:
            name: Copying artifacts
            command: mv /tmp/workspace/* ./
        # Dgoss tests steps
        - run: # Run test wich enable to validate bootstrap image.
            name: Dgoss tests
            command: |
              curl -L https://raw.githubusercontent.com/aelsabbahy/goss/master/extras/dgoss/dgoss -o /usr/local/bin/dgoss
              chmod +rx /usr/local/bin/dgoss
              curl -L https://github.com/aelsabbahy/goss/releases/download/v0.3.6/goss-linux-amd64 -o /usr/local/bin/goss
              chmod +rx /usr/local/bin/goss
              export GOSS_PATH=/usr/local/bin/goss
              export GOSS_FILES_STRATEGY=cp
              make dgoss-bootstrap

      # Reporting step, will run sonar report from scan.
      report:
        # PARAMETERS
        parameters:
          operatorDir:
            type: string
            description: relative path where the build must be run
            default: cassandra-k8s-operator
          operatorName:
            type: string
            description: operator's name
            default: CassKop
        working_directory: /home/circleci/<< parameters.operatorDir >>
        executor: operator-build
        # STEPS
        steps:
        # Checkout steps
        - checkout:
            path: /home/circleci/cassandra-k8s-operator
        - attach_workspace:
            at: ./
        - restore_cache: # If exist, restore dependencies libs download cache, from previous pipeline execution.
            name: Restore SonarQube Scanner
            keys:
              - sonar-scanner-3.3.0.1492-linux
        # Sonar steps
        - run:
            name: Download SonarQube Scanner
            command: |
              chmod +x /home/circleci/cassandra-k8s-operator/install_sonar-scanner.sh
              ./.circleci/install_sonar-scanner.sh
        - save_cache: # Cache sonar download
            name: Cache SonarQube Scanner
            key: sonar-scanner-3.3.0.1492-linux
            paths:
              - sonar-scanner-3.3.0.1492-linux
              - /home/circleci/cassandra-k8s-operator/.sonar
        - run: # Run sonar scan
            name: Sonarcloud Scan
            command: |
              ./sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner \
              -Dsonar.projectName=<< parameters.operatorName >> \
              -Dsonar.projectKey=${SONAR_PROJECT} \
              -Dsonar.login=${SONAR_TOKEN} \
              -Dsonar.branch.name=${CIRCLE_BRANCH} \
              -Dsonar.organization=${SONAR_ORGANISATION} \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.projectBaseDir=/home/circleci/<< parameters.operatorDir >> \
              -Dsonar.sources=. \
              -Dsonar.sources.inclusions="**/**.go" \
              -Dsonar.exclusions="**/*_test.go,**/vendor/**,**/sonar-scanner-3.3.0.1492-linux/**,**docs/**,**/**/zz_generated*" \
              -Dsonar.coverage.exclusions="**/vendor/**,**/test/**,**docs/**" \
              -Dsonar.tests=. \
              -Dsonar.language=go \
              -Dsonar.sourceEncoding=UTF-8 \
              -Dsonar.test.inclusions="**/**_test.go" \
              -Dsonar.test.exclusions="**/vendor/**" \
              -Dsonar.go.coverage.reportPaths=coverage.out \
              -Dsonar.go.tests.reportPaths=test-report.out \
              -Dsonar.coverage.dtdVerification=false \
              -Dsonar.log.level=INFO
              cat -n .scannerwork/report-task.txt
        # Artifacts definitions
        - store_test_results: # Store sonar scan reports
            path: reports

# Workflow definition
workflows:
  version: 2
  # CassKop operator workflow.
  ci-casskop-operator:
    jobs:
      - operator/generate:
          name: generate-casskop
          filters:
            tags:
              only: /.*/

      - operator/unit-test:
          name: unit-test-casskop
          requires:
            - generate-casskop
          filters:
            tags:
              only: /.*/

      - operator/build:
          name: build-casskop
          requires:
            - unit-test-casskop
          filters:
            tags:
              only: /.*/

      - operator/docker-dgoss-test:
          name: docker-dgoss-test-casskop
          requires:
            - build-casskop
          filters:
            tags:
              only: /.*/

      - operator/report:
          name: report-casskop
          requires:
            - unit-test-casskop
          filters:
            tags:
              only: /.*/
            branches:
              # report sonar only from canonical repository 
              only: /^(?!pull\/).*$/ # https://stackoverflow.com/a/5334825/358804 

      - minikube/e2e-orb:
          name: e2e-test RollingRestart
          test_name: RollingRestart
          requires:
            - unit-test-casskop
          filters:
            tags:
              only: /.*/
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9w]+/

      - minikube/e2e-orb:
          name: e2e-test ScaleUp
          test_name: ClusterScaleUp
          requires:
            - unit-test-casskop
          filters:
            tags:
              only: /.*/
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/

      - minikube/e2e-orb:
          name: e2e-test ScaleDown
          test_name: ClusterScaleDown
          requires:
            - unit-test-casskop
          filters:
            tags:
              only: /.*/
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/

      - minikube/e2e-orb:
          name: e2e-test ScaleDownSimple
          test_name: ClusterScaleDownSimple
          requires:
            - unit-test-casskop
          filters:
            tags:
              only: /.*/
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/

      - minikube/e2e-orb:
          name: e2e-test CreateOneClusterService
          test_name: CreateOneClusterService
          requires:
            - unit-test-casskop
          filters:
            tags:
              only: /.*/
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/

      - minikube/e2e-orb:
          name: e2e-test UpdateConfigMap
          test_name: UpdateConfigMap
          requires:
            - unit-test-casskop
          filters:
            tags:
              only: /.*/
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/

      - minikube/e2e-orb:
          name: e2e-test ExecuteCleanup
          test_name: ExecuteCleanup
          requires:
            - unit-test-casskop
          filters:
            tags:
              only: /.*/
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/

  # CassKop operator workflow.
  ci-multicasskop-operator:
    jobs:
      - operator/generate:
          name: generate-casskop
          operatorDir: cassandra-k8s-operator
          operatorName: CassKop
          filters:
            tags:
              only: /.*/
      - operator/generate:
          name: generate-multicasskop
          operatorDir: cassandra-k8s-operator/multi-casskop
          operatorName: MultiCassKop
          requires:
            - generate-casskop
          filters:
            tags:
              only: /.*/
      - operator/unit-test:
          name: unit-test-multicasskop
          operatorDir: cassandra-k8s-operator/multi-casskop
          operatorName: MultiCassKop
          requires:
            - generate-multicasskop
          filters:
            tags:
              only: /.*/
      - operator/build:
          name: build-multicasskop
          operatorDir: cassandra-k8s-operator/multi-casskop
          operatorName: MultiCassKop
          requires:
            - unit-test-multicasskop
          filters:
            tags:
              only: /.*/
      - operator/report:
          name: report-multicasskop
          operatorDir: cassandra-k8s-operator/multi-casskop
          operatorName: MultiCassKop
          requires:
            - unit-test-multicasskop
          filters:
            tags:
              only: /.*/
            branches:
              # report sonar only from canonical repository
              only: /^(?!pull\/).*$/ # https://stackoverflow.com/a/5334825/358804